@* View para Integrar o controlo Api/FolhetosController.cs *@

@{
    ViewBag.Title = "Listagem e adição de Agentes via AJAX + JSON + Web API";
}

<h2>Listagem e adição de Agentes via AJAX + JSON + Web API</h2>


<div class="container">
    @*
        Container da grelha de agentes.
        Irá conter os divs com informação sobre agentes.
    *@
    <div class="row" id="grelha-folhetos"></div>

    <hr />
    <form id="adicionar-folheto">
        @* Campo do nome *@
        <div class="form-group">
            @*
                O <label> é o elemento que se deve usar quando se
                querem fazer labels para <input>s ou <select>s.

                O atributo "for" é usado como ponteiro para o elemento
                com o ID respetivo, e melhora a acessibilidade do site,
                porque torna os campos mais perceptíveis para utilizadores
                com leitores de ecrã, e clicar nas labels ativa os campos
                respetivos (sem necessidade de links)
            *@
            <label for="titulo" class="control-label">Titulo</label>
            <input required class="form-control" type="text" name="titulo" id="titulo" />
        </div>

        <div class="form-group">
            <label for="descricao" class="control-label"> Descricao </label>
            <input required class="form-control" type="text" name="descricao" id="descricao" />
        </div>
        <label> Upload das páginas do folheto</label>
        <div class="form-group">
            <input type="file"
                   name="files"
                   style="color:blue;"
                   accept=".jpeg" multiple />
        </div>

        <div class="form-group">
            <label for="datainic" class="control-label"> Data de inicio </label>
            <input required class="form-control" type='date' name="datainic" id="datainic" />
        </div>

        <div class="form-group">
            <label for="datafim" class="control-label"> Data de inicio </label>
            <input required class="form-control" type='date' name="datafim" id="datafim" />
        </div>

        <div class="form-group">
            <label for="nomeempresa" class="control-label"> Nome da Loja </label>
            <input required class="form-control" type="text" name="nomeempresa" id="nomeempresa" />
        </div>


        <button class="btn btn-primary" type="submit">Adicionar folheto</button>
    </form>
</div>

@section scripts {
    @*
        Container para "templates". Adiciono a classe "hidden" do Bootstrap (3)
        para que os conteúdos não sejam visíveis para o utilizador.
    *@
    <div class="hidden">
        <div id="template-folheto" class="col-sm-3">
            <a href="#" class="thumbnail">
                @* Imagem do folheto. *@
                <img class="img-responsive" />

                <div class="caption">
                    @* Nome do agente. *@
                    <h3></h3>

                    @* Data *@
                    <p></p>
                </div>
            </a>
        </div>
    </div>



    <script>
        ///////////////////////////////////////////////////////
        // Leitura de dados
        ///////////////////////////////////////////////////////

        function getFolhetos() {
            return fetch("/api/folhetos", {
                header: { 'Accept': 'application/json' }
            })
                .then(resposta => resposta.json());
        }

        ///////////////////////////////////////////////////////
        // Mostrar dados no ecrã
        ///////////////////////////////////////////////////////

        function divFolheto(folheto) {
            /**
            * Crio uma cópia do elemento HTML com ID "template-agente"
            * com a função "cloneNode". O "true" no "cloneNode" é para indicar
            * que quero também copiar os elementos filho.
            */
            let template = document.querySelector('#template-folheto').cloneNode(true);
            template.removeAttribute('id');
            // A partir do template, obter o <img />
            let fotoFolheto = template.querySelector('img');
            //colocar try catch aqui, caso nao haja imagem nao colocar nada
            fotoFolheto.src = "/imagens/folheto" + folheto.FolhetosID + "/pagina1.jpeg";

            // fotoFolheto.classList.add('hidden');


            // Defino o nome e a esquadra no template...
            template.querySelector('.caption > h3').textContent = folheto.Titulo;
            //template.querySelector('.caption > p').textContent = `De ${folheto.DataInic} a ${folheto.DataFim} `;

            return template;
        }
        //    /**
        //    * Cria o <div /> de um Folheto, e adiciona-o à grelha
        //    * de folhetos
        //    **/
        function adicionarFolheto(folheto) {
            let template = divFolheto(folheto);

            let grelha = document.querySelector('#grelha-folhetos');

            grelha.appendChild(template);
        }

        ///////////////////////////////////////////////////////
        // Formulário para adicionar um agente,
        // e mostrar o agente criado.
        ///////////////////////////////////////////////////////

        // Adicionar evento para submissão...
        document.querySelector('#adicionar-folheto').addEventListener('submit', function (e) {
            // Prevenir que o browser submeta o formulário por nós...
            e.preventDefault();

            // O this é o formulário submetido (<form id="adicionar-agente"></form>)
            let form = this;

            // Criar o objeto do Agente,
            // com os campos do Nome e da Esquadra,
            // através dos valores dos campos no formulário.
            let folheto = {
                Titulo: form.querySelector('[name=titulo]').value,
                Descricao: form.querySelector('[name=descricao]').value,
                DataInic: form.querySelector('[name=datainic]').value,
                DataFim: form.querySelector('[name=datafim]').value,
                NomeEmpresa: form.querySelector('[name=nomeempresa]').value
            };

            // Converter em JSON.
            let jsonData = JSON.stringify(folheto);

            // Usar o fetch para enviar o JSON, como POST (quero CRIAR, logo POST)
            fetch('/api/folhetos', { // Ver  Api/AgentesController, método PostAgentes
                method: 'post', // Quero usar POST
                headers: { 'Content-Type': 'application/json' }, // Vou enviar JSON
                body: jsonData // Dados a enviar.
            })
                .then(resposta => { // Resposta da criação
                    if (resposta.ok) { // "ok" indica se 200 <= status < 300.
                        return resposta.json(); // JSON do Agente criado.
                    } else {
                        // Erro (vai parar ao catch abaixo)
                        return resposta.json()
                            .then(erro => Promise.reject(erro));
                    }
                })
                // Agente criado. "novoAgente" é o objeto do Agente.
                // vamos adicionar o novo agente ao ecrã.
                .then(novoFolheto => adicionarFolheto(novoFolheto))
                // Ocorreu um erro.
                .catch(erro => {
                    // Ver o que se passou...
                    // TPC: Mostrar o erro ao utilizador (ver objeto 'erro', estão lá os erros)
                    console.error(erro);
                });
        });



        ///////////////////////////////////////////////////////
        // Arranque
        ///////////////////////////////////////////////////////

        /**
         * Inicia o ecrã dos folhetos.
         */
        function iniciarFolhetos() {
            getFolhetos()
                .then(folhetos => {
                    let grelha = document.querySelector('#grelha-folhetos');

                    for (let folheto of folhetos) {
                        console.log(folheto);
                        adicionarFolheto(folheto);
                    }
                })
        }

        iniciarFolhetos();
    </script>
}


